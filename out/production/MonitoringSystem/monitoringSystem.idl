module MonitoringSystem
{
    struct NoxReading {
        long time;
        long date;
        string station_name;
        long reading_value;
    };

    interface MonitoringStation{
        readonly attribute string station_name;
        readonly attribute string location;
        readonly attribute boolean is_active;
        NoxReading get_reading();
        void activate(in string local_server);
    };

    typedef sequence<NoxReading> Log_of_alarm_readings;
    typedef sequence<NoxReading> Set_of_readings;
    typedef sequence<string> Log_of_events;

    interface RegionalCentre{
        readonly attribute string name;
        readonly attribute string location_name;
        readonly attribute Log_of_alarm_readings log;
        readonly attribute Log_of_events log_of_events;
        void raise_alarm (in NoxReading alarmReading);
        Set_of_readings take_readings();
        void add_monitoring_station(in string station_name, in string station_location);
        void add_to_log(in string event);
        boolean connect_to_monitoring_center(in string center_name);
    };

    interface MonitoringCentre{
        readonly attribute string name;
        void raise_alarm(in NoxReading alarm_reading);
        void register_agency(in string who, in string contact_details, in string area_of_interest);
        void register_local_server(in string server_name);
        void pull_local_server_readings();
        void pull_local_servers_log();
        void pull_local_servers_alarm_log();
        void notify_agency(in NoxReading alarm_reading);
    };

};